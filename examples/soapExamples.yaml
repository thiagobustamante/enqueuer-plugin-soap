subscriptions:
  - name: Soap Server
    type: soap
    port: 8765
    path: /server
    soap:
      wsdl: './examples/wsdl/AirTicketLLS2.12.0RQ.wsdl'
      service: AirTicketService
      port: AirTicketPortType
      operation: AirTicketRQ
    response: 
      applicationResults:
        success: 
          type: Application
    onMessageReceived:
      assertions:
        - expect: body.AirTicketRQ.OptionalQualifiers.FOP_Qualifiers.BasicFOP.attributes.Type
          toBeEqualTo: `MyFOP`
        - expect: headers.myheader
          toBeEqualTo: `Test Header`
        - expect: headers.newHeader
          toBeEqualTo: `New Header`
  - name: Soap Proxy
    type: soap-proxy
    port: 9876
    path: /server
    soap:
      wsdl: './examples/wsdl/AirTicketLLS2.12.0RQ.wsdl'
      service: AirTicketService
      port: AirTicketPortType
      operation: AirTicketRQ
    endpoint: 'http://localhost:8765/server'
    onOriginalMessageReceived:
      script: this.redirect.headers.newHeader = 'New Header'; console.log(this.response);
      assertions:
        - expect: body.AirTicketRQ.OptionalQualifiers.FOP_Qualifiers.BasicFOP.attributes.Type
          toBeEqualTo: `MyFOP`
        - expect: headers['myheader']
          toBeEqualTo: `Test Header`
    onMessageReceived:
      script: console.log(this.response);
      assertions:
        - expect: body.applicationResults.success.type
          toBeEqualTo: `Application`
publishers:
  - name: Publisher Example
    type: soap
    payload:
      AirTicketRQ:
        OptionalQualifiers:
          FOP_Qualifiers:
            BasicFOP:
              attributes:
                Type: MyFOP
    headers: 
      myheader: Test Header
    soap:
      wsdl: './examples/wsdl/AirTicketLLS2.12.0RQ.wsdl'
      service: AirTicketService
      port: AirTicketPortType
      operation: AirTicketRQ
    options:
      endpoint: 'http://localhost:9876/server'
      preserveWhitespace: true
